version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: reservation-postgres
    environment:
      POSTGRES_DB: reservation
      POSTGRES_USER: reservation
      POSTGRES_PASSWORD: reservation
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reservation -d reservation"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - reservation-network

  redis:
    image: redis:7-alpine
    container_name: reservation-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - reservation-network

  reservation:
    build:
      context: ./Reservation
      dockerfile: Dockerfile
    container_name: reservation-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DB_HOST=postgres
      - ConnectionStrings__DB_PORT=5432
      - ConnectionStrings__DB_NAME=reservation
      - ConnectionStrings__DB_USER=reservation
      - ConnectionStrings__DB_PASSWORD=reservation
      - ConnectionStrings__Redis=redis:6379
      - Services__Auth=http://auth:5001
      - Services__Payment=http://payment:5010
      - Services__Resource=http://resource:5002
      - Services__Organization=http://organization:5004
      - Services__Email=http://email:5006
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "5000:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - reservation-network
    restart: unless-stopped

  # Mock services for testing (optional)
  auth-mock:
    image: nginx:alpine
    container_name: auth-mock
    ports:
      - "5001:80"
    volumes:
      - ./mocks/auth-mock.conf:/etc/nginx/conf.d/default.conf
    networks:
      - reservation-network

  payment-mock:
    image: nginx:alpine
    container_name: payment-mock
    ports:
      - "5010:80"
    volumes:
      - ./mocks/payment-mock.conf:/etc/nginx/conf.d/default.conf
    networks:
      - reservation-network

  resource-mock:
    image: nginx:alpine
    container_name: resource-mock
    ports:
      - "5002:80"
    volumes:
      - ./mocks/resource-mock.conf:/etc/nginx/conf.d/default.conf
    networks:
      - reservation-network

  organization-mock:
    image: nginx:alpine
    container_name: organization-mock
    ports:
      - "5004:80"
    volumes:
      - ./mocks/organization-mock.conf:/etc/nginx/conf.d/default.conf
    networks:
      - reservation-network

  email-mock:
    image: nginx:alpine
    container_name: email-mock
    ports:
      - "5006:80"
    volumes:
      - ./mocks/email-mock.conf:/etc/nginx/conf.d/default.conf
    networks:
      - reservation-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  reservation-network:
    driver: bridge
